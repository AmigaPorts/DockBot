@DATABASE "dockbot"
@MASTER   "Stuff:Andrew/DockBot/doc/dockbot.doc"
@REMARK   This file was created by ADtoHT 2.1 on 03-Dec-19 21:19:02
@REMARK   Do not edit
@REMARK   ADtoHT is © 1993-1995 Christian Stieber

@NODE MAIN "dockbot.doc"

                               @{b}dockbot.library@{ub}

@{"DB_AllocMem()" LINK "DB_AllocMem"}           @{"DB_CloseSettings()" LINK "DB_CloseSettings"}
@{"DB_DrawInsetFrame()" LINK "DB_DrawInsetFrame"}     @{"DB_DrawOutsetFrame()" LINK "DB_DrawOutsetFrame"}
@{"DB_FreeMem()" LINK "DB_FreeMem"}            @{"DB_GetDockGadgetBounds()" LINK "DB_GetDockGadgetBounds"}
@{"DB_ListClasses()" LINK "DB_ListClasses"}        @{"DB_OpenSettingsRead()" LINK "DB_OpenSettingsRead"}
@{"DB_OpenSettingsWrite()" LINK "DB_OpenSettingsWrite"}  @{"DB_ReadBeginBlock()" LINK "DB_ReadBeginBlock"}
@{"DB_ReadConfig()" LINK "DB_ReadConfig"}         @{"DB_ReadEndBlock()" LINK "DB_ReadEndBlock"}
@{"DB_ReadSetting()" LINK "DB_ReadSetting"}        @{"DB_RequestDockGadgetDraw()" LINK "DB_RequestDockGadgetDraw"}
@{"DB_RequestDockQuit()" LINK "DB_RequestDockQuit"}    @{"DB_RequestLaunch()" LINK "DB_RequestLaunch"}
@{"DB_ShowError()" LINK "DB_ShowError"}          @{"DB_WriteBeginBlock()" LINK "DB_WriteBeginBlock"}
@{"DB_WriteBeginEnd()" LINK "DB_WriteEndBlock"}      @{"DB_WriteConfig()" LINK "DB_WriteConfig"}
@{"DB_WriteEndBlock()" LINK "DB_WriteEndBlock"}      @{"DB_WriteSetting()" LINK "DB_WriteSetting"}

@ENDNODE
@NODE "DB_AllocMem" "dockbot.library/DB_AllocMem()"
@{b}

   NAME@{ub}
        DB_AllocMem -- Allocate memory from the pools maintained by the library.@{b}

   SYNOPSIS@{ub}
        BLOCK = DB_AllocMem(byteSize, attributes)
          D0                  D0         D1
        VOID* DB_AllocMem(ULONG, ULONG);@{b}

   FUNCTION@{ub}
        Allocates a block of memory from the pools maintained internally by the
        DockBot library.@{b}

   INPUTS@{ub}
        byteSize   - The size, in bytes, to allocate.
        attributes - The requirements and options for the memory. This is a
                     subset of those accepted by the AllocMem function.

                     requirements:

                       MEMF_CHIP  - Allocate chip memory.

                       MEMF_FAST  - Attempt to allocate fast memory.

                     options:

                       MEMF_CLEAR - The memory will be initialized to all zeros.@{b}

   RESULT@{ub}
        The newly allocated block of memory will be returned. If the request
        could not be satisfied 0 will be returned.@{b}

   EXAMPLE@{ub}
        DB_AllocMem(64,0) - Allocate the best memory available.
        DB_AllocMem(64, MEMF_CLEAR) - Allocate the best memory available and
                                      clear it.
        DB_AllocMem(64, MEMF_CHIP|MEMF_CLEAR) - Allocate cleared chip memory.@{b}

   SEE ALSO@{ub}
        @{"DB_FreeMem()" LINK "DB_FreeMem"}, AllocMem()

@ENDNODE
@NODE "DB_CloseSettings" "dockbot.library/DB_CloseSettings()"
@{b}

   NAME@{ub}
        DB_CloseSettings -- Closes a previously opened settings file.@{b}

   SYNOPSIS@{ub}
        DB_CloseSettings(settings)
                           A0
        VOID @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}(struct DockSettings *);@{b}

   FUNCTION@{ub}
        Closes and deallocates a DockSettings structure previously allocated by
        @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"} or @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}.
        Do not use the settings object after calling this function.@{b}

   INPUTS@{ub}
        settings - The DockSettings structure previously allocated.@{b}

   RESULT@{ub}
        The DockSettings structure will be deallocated.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"}("ENV:DockBot.prefs") ) {
          ...
          DB_CloseSettings(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsRead()" LINK "DB_OpenSettingsRead"},@{"DB_OpenSettingsWrite()" LINK "DB_OpenSettingsWrite"}

@ENDNODE
@NODE "DB_DrawInsetFrame" "dockbot.library/DB_DrawInsetFrame()"
@{b}

   NAME@{ub}
        @{"DB_DrawOutsetFrame" LINK "DB_DrawOutsetFrame"} -- Draws a lowered 3d rectangle.@{b}

   SYNOPSIS@{ub}
        DB_DrawInsetFrame(rp, bounds)
                          A0    A1
        VOID DB_DrawInsetFrame(struct RastPort *, @{"struct Rect" LINK "dockbot.h/File" 68} *);@{b}

   FUNCTION@{ub}
        Draws a lowered 3d frame with the supplied RastPort.@{b}

   INPUTS@{ub}
        rp     - The RastPort to draw the frame with.
        bounds - A pointer to a Rect that defines the frame to draw.@{b}

   RESULT@{ub}
        A 3d frame will be drawn to the window.@{b}

   EXAMPLE@{ub}
        @{"struct Rect" LINK "dockbot.h/File" 68} bounds;
        @{"DB_GetDockGadgetBounds" LINK "DB_GetDockGadgetBounds"}(obj, &bounds);
        DB_DrawInsetFrame(rp, &bounds);

@ENDNODE
@NODE "DB_DrawOutsetFrame" "dockbot.library/DB_DrawOutsetFrame()"
@{b}

   NAME@{ub}
        DB_DrawOutsetFrame -- Draws a raised 3d rectangle.@{b}

   SYNOPSIS@{ub}
        DB_DrawOutsetFrame(rp, bounds)
                           A0    A1
        VOID DB_DrawOutsetFrame(struct RastPort *, @{"struct Rect" LINK "dockbot.h/File" 68} *);@{b}

   FUNCTION@{ub}
        Draws a raised 3d frame with the supplied RastPort.@{b}

   INPUTS@{ub}
        rp     - The RastPort to draw the frame with.
        bounds - A pointer to a Rect that defines the frame to draw.@{b}

   RESULT@{ub}
        A 3d frame will be drawn to the window.@{b}

   EXAMPLE@{ub}
        @{"struct Rect" LINK "dockbot.h/File" 68} bounds;
        @{"DB_GetDockGadgetBounds" LINK "DB_GetDockGadgetBounds"}(obj, &bounds);
        DB_DrawOutsetFrame(rp, &bounds);

@ENDNODE
@NODE "DB_FreeMem" "dockbot.library/DB_FreeMem()"
@{b}

   NAME@{ub}
        DB_FreeMem - Free a block of memory allocated by @{"DB_AllocMem" LINK "DB_AllocMem"}.@{b}

   SYNOPSIS@{ub}
        DB_FreeMem(memoryBlock,byteSize)
                      A0         D0
        DB_FreeMem(VOID *,ULONG);@{b}

   FUNCTION@{ub}
        Frees a block of memory previously allocated with @{"DB_AllocMem" LINK "DB_AllocMem"}.@{b}

   INPUTS@{ub}
        memoryBlock - The block of memory allocated by @{"DB_AllocMem" LINK "DB_AllocMem"}.
        byteSize    - The size of the block.@{b}

   SEE ALSO@{ub}
        @{"DB_AllocMem()" LINK "DB_AllocMem"}, FreeMem()

@ENDNODE
@NODE "DB_GetDockGadgetBounds" "dockbot.library/DB_GetDockGadgetBounds()"
@{b}

   NAME@{ub}
        DB_GetDockGadgetBounds -- Get the bounding box of a dock gadget.@{b}

   SYNOPSIS@{ub}
        DB_GetDockGadgetBounds(obj, bounds)
                               A0     A1
        VOID DB_GetDockGadgetBounds(Object *, @{"struct Rect" LINK "dockbot.h/File" 68} *);@{b}

   FUNCTION@{ub}
        Queries a dock gadget for it's position and size.@{b}

   INPUTS@{ub}
        obj    - The dock gadget to query.
        bounds - A pointer to a Rect to be filled in by the gadget.@{b}

   RESULT@{ub}
        The parameter bounds will be filled contain the bounds of the gadget.@{b}

   EXAMPLE@{ub}
        @{"struct Rect" LINK "dockbot.h/File" 68} bounds;
        DB_GetDockGadgetBounds(obj, &bounds);

@ENDNODE
@NODE "DB_ListClasses" "dockbot.library/DB_ListClasses()"
@{b}

   NAME@{ub}
        DB_ListClasses - List the available gadget classes.@{b}

   SYNOPSIS@{ub}
        DB_ListClasses(list)
                       A0
        DB_ListClasses(struct List *)@{b}

   FUNCTION@{ub}
        Populates the supplied list object with nodes containing the names of@{b}


   INPUTS@{ub}@{b}

   RESULT@{ub}@{b}

   EXAMPLE@{ub}@{b}

   SEE ALSO@{ub}

@ENDNODE
@NODE "DB_OpenSettingsRead" "dockbot.library/DB_OpenSettingsRead()"
@{b}

   NAME@{ub}
        DB_OpenSettingsRead -- Open the settings file for reading.@{b}

   SYNOPSIS@{ub}
        Settings = DB_OpenSettingsRead(filename)
          D0                              A0
        struct DockSettings *DB_OpenSettingsRead(STRPTR);@{b}

   FUNCTION@{ub}
        Opens the settings file for reading.@{b}

   INPUTS@{ub}
        filename - The full path to the settings file to open.@{b}

   RESULT@{ub}
        Returns a pointer to a DockSettings structure set up for reading.
        Returns NULL if there was an error opening or reading the file.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = DB_OpenSettingsRead("ENV:DockBot.prefs") ) {
          ...
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsWrite()" LINK "DB_OpenSettingsWrite"},@{"DB_CloseSettings()" LINK "DB_CloseSettings"}

@ENDNODE
@NODE "DB_OpenSettingsWrite" "dockbot.library/DB_OpenSettingsWrite()"
@{b}

   NAME@{ub}
        DB_OpenSettingsWrite -- Open the settings file for writing.@{b}

   SYNOPSIS@{ub}
        Settings = DB_OpenSettingsWrite(filename)
          D0                              A0
        struct DockSettings *DB_OpenSettingsWrite(STRPTR);@{b}

   FUNCTION@{ub}
        Opens the settings file for writing. If the file doesn't exist it will
        be created.@{b}

   INPUTS@{ub}
        filename - The full path to the settings file to open.@{b}

   RESULT@{ub}
        Returns a pointer to a DockSettings structure set up for writing.
        Returns NULL if there was an error opening the file.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = DB_OpenSettingsWrite("ENV:DockBot.prefs") ) {
          ...
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsRead()" LINK "DB_OpenSettingsRead"},@{"DB_CloseSettings()" LINK "DB_CloseSettings"}

@ENDNODE
@NODE "DB_ReadBeginBlock" "dockbot.library/DB_ReadBeginBlock()"
@{b}

   NAME@{ub}
        DB_ReadBeginBlock -- Attempts to read a block start from the setings.@{b}

   SYNOPSIS@{ub}
        success = DB_ReadBeginBlock(settings)
          D0                          A0
        BOOL DB_ReadBeginBlock(struct DockSettings *);@{b}

   FUNCTION@{ub}
        Looks for the word "begin" on the current line of the settings file.
        If found the DockSettings struct records the beginning of an indented
        block.@{b}

   INPUTS@{ub}
        settings - The DockSettings structure allocated by @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"}.@{b}

   RESULT@{ub}
        TRUE if a block start was found, FALSE if it was not.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"}("ENV:DockBot.prefs") ) {
          if( DB_ReadBeginBlock(s) ) {
            while(!@{"DB_ReadEndBlock" LINK "DB_ReadEndBlock"}(s)) {
              ...
            }
          }
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsRead()" LINK "DB_OpenSettingsRead"},@{"DB_ReadEndBlock()" LINK "DB_ReadEndBlock"}

@ENDNODE
@NODE "DB_ReadConfig" "dockbot.library/DB_ReadConfig()"
@{b}

   NAME@{ub}
        DB_ReadConfig - Read the DockBot configuration file.@{b}

   SYNOPSIS@{ub}
        success = DB_ReadConfig(cfg,settings)
          D0                                    A0  A1
        BOOL DB_ReadConfig(@{"struct DockConfig" LINK "dockbot.h/File" 50} *, struct DockSettings *)@{b}

   FUNCTION@{ub}
        Reads the configuration data from the settings object and populates
        the cfg object.@{b}

   INPUTS@{ub}
        cfg                 - The container for configuration data.
            settings        - The structure used to read configuration data.@{b}

   RESULT@{ub}
        TRUE if the configuration was read.

@ENDNODE
@NODE "DB_ReadEndBlock" "dockbot.library/DB_ReadEndBlock()"
@{b}

   NAME@{ub}
        DB_ReadEndBlock -- Attempts to read a block end from the setings.@{b}

   SYNOPSIS@{ub}
        success = DB_ReadEndBlock(settings)
          D0                        A0
        BOOL DB_ReadEndBlock(struct DockSettings *);@{b}

   FUNCTION@{ub}
        Looks for the word "end" on the current line of the settings file.
        If found the DockSettings struct records the end of an indented block.@{b}

   INPUTS@{ub}
        settings - The DockSettings structure allocated by @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"}.@{b}

   RESULT@{ub}
        TRUE if a block end was found, FALSE if it was not.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"}("ENV:DockBot.prefs") ) {
          if( @{"DB_ReadBeginBlock" LINK "DB_ReadBeginBlock"}(s) ) {
            while(!DB_ReadEndBlock(s)) {
              ...
            }
          }
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsRead()" LINK "DB_OpenSettingsRead"},@{"DB_ReadBeginBlock()" LINK "DB_ReadBeginBlock"}

@ENDNODE
@NODE "DB_ReadSetting" "dockbot.library/DB_ReadSetting()"
@{b}

   NAME@{ub}
        DB_ReadSetting -- Attempts to read a value from the settings file.@{b}

   SYNOPSIS@{ub}
        success = DB_ReadSetting(settings, value)
          D0                       A0        A1
        BOOL DB_ReadSetting(struct DockSettings *, @{"struct DockSettingValue" LINK "dockbot.h/File" 311} *);@{b}

   FUNCTION@{ub}
        Looks for the key and value separated by an equals sign on the current
        line of the settings file.
        If found the value struct will be filled in with key and value.@{b}

   INPUTS@{ub}
        settings - The DockSettings structure allocated by @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"}.@{b}

   RESULT@{ub}
        TRUE if a block end was found, FALSE if it was not.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        @{"struct DockSettingValue" LINK "dockbot.h/File" 311} val;
        if( s = @{"DB_OpenSettingsRead" LINK "DB_OpenSettingsRead"}("ENV:DockBot.prefs") ) {
          if( @{"DB_ReadBeginBlock" LINK "DB_ReadBeginBlock"}(s) ) {
            while(!@{"DB_ReadEndBlock" LINK "DB_ReadEndBlock"}(s)) {
              if( DB_ReadSetting(s, &val) ) {
                ...
              }
            }
          }
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsRead()" LINK "DB_OpenSettingsRead"}

@ENDNODE
@NODE "DB_RequestDockGadgetDraw" "dockbot.library/DB_RequestDockGadgetDraw()"
@{b}

   NAME@{ub}
        DB_RequestDockGadgetDraw -- Requests the redraw of a dock gadget.@{b}

   SYNOPSIS@{ub}
        DB_RequestDockGadgetDraw(obj)
                                 A0
        DB_RequestDockGadgetDraw(Object *);@{b}

   FUNCTION@{ub}
        Sends an asynchronous message from a gadget to the DockBot application
        requesting that it be redrawn.@{b}

   INPUTS@{ub}
        obj - The dock gadget requesting to be redrawn.@{b}

   EXAMPLE@{ub}
        void request_draw(Object *obj) {
          DB_RequestDockGadgetDraw(obj);
        }@{b}

   SEE ALSO@{ub}
        dockbot.h

@ENDNODE
@NODE "DB_RequestDockQuit" "dockbot.library/DB_RequestDockQuit()"
@{b}

   NAME@{ub}
        DB_RequestDockQuit -- Asks the DockBot application to quit.@{b}

   SYNOPSIS@{ub}
        DB_RequestDockQuit(obj)
                           A0
        DB_RequestDockQuit(Object *);@{b}

   FUNCTION@{ub}
        Sends an asynchronous message from a gadget to the DockBot application
        requesting that it quit.@{b}

   INPUTS@{ub}
        obj - The dock gadget requesting the quit.@{b}

   EXAMPLE@{ub}
        void request_quit(Object *obj) {
          DB_RequestDockQuit(obj);
        }@{b}

   SEE ALSO@{ub}
        dockbot.h

@ENDNODE
@NODE "DB_RequestLaunch" "dockbot.library/DB_RequestLaunch()"
@{b}

   NAME@{ub}
        DB_RequestLaunch -- Requests the launch of an external program.@{b}

   SYNOPSIS@{ub}
        DB_RequestLaunch(obj, path, args, console, wb)
                         A0   A1    A2    A3       D0
        DB_RequestLaunch(Object *, STRPTR, STRPTR, STRPTR, BOOL);@{b}

   FUNCTION@{ub}
        Sends an asynchronous message from a gadget to the DockBot application
        requesting that it launch an external program.@{b}

   INPUTS@{ub}
        obj - The dock gadget making the request.
        path - The path to the executable to be launched.
        args - Optional command line arguments to pass.
        console - Optional console options to use when launching a DOS application.
        wb - Indicates whether the program should be launched as if started by
             Workbench.@{b}

   EXAMPLE@{ub}
        DB_RequestLaunch(obj, "SYS:Utilities/MultiView", "T:image.iff", NULL, TRUE);@{b}

   SEE ALSO@{ub}
        dockbot.h

@ENDNODE
@NODE "DB_ShowError" "dockbot.library/DB_ShowError()"
@{b}

   NAME@{ub}
        DB_ShowError - Display an error message to the user.@{b}

   SYNOPSIS@{ub}
        DB_ShowError(message)
                      A0
        DB_ShowError(STRPTR);@{b}

   FUNCTION@{ub}
        Displays the message to the user in a requester.@{b}

   INPUTS@{ub}
        message - The error message to display to the user.

@ENDNODE
@NODE "DB_WriteBeginBlock" "dockbot.library/DB_WriteBeginBlock()"
@{b}

   NAME@{ub}
        DB_WriteBeginBlock -- Writes the start of a block to the settings file.@{b}

   SYNOPSIS@{ub}
        success = DB_WriteBeginBlock(settings)
          D0                            A0
        BOOL DB_WriteBeginBlock(struct DockSettings *);@{b}

   FUNCTION@{ub}
        Writes the word "begin" to the settings file previously opened with
        @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}. Subsequent writes to the file will be indented.@{b}

   INPUTS@{ub}
        settings - The DockSettings structure allocated by @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}.@{b}

   RESULT@{ub}
        TRUE if a block begin was written or FALSE if it was not.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}("ENV:DockBot.prefs") ) {
          if( DB_WriteBeginBlock(s) ) {
            ...
          }
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsWrite()" LINK "DB_OpenSettingsWrite"}, @{"DB_WriteEndBlock()" LINK "DB_WriteEndBlock"}

@ENDNODE
@NODE "DB_WriteConfig" "dockbot.library/DB_WriteConfig()"
@{b}

   NAME@{ub}
        DB_WriteConfig - Write the DockBot configuration file.@{b}

   SYNOPSIS@{ub}
        success = DB_WriteConfig(cfg,settings)
          D0                                     A0  A1
        BOOL DB_WriteConfig(@{"struct DockConfig" LINK "dockbot.h/File" 50} *, struct DockSettings *)@{b}

   FUNCTION@{ub}
        Writes the configuration data in cfg to the settings object.@{b}

   INPUTS@{ub}
        cfg                 - The container for configuration data.
            settings        - The structure used to write configuration data.@{b}

   RESULT@{ub}
        TRUE if the configuration was written.

@ENDNODE
@NODE "DB_WriteEndBlock" "dockbot.library/DB_WriteEndBlock()"
@{b}

   NAME@{ub}
        DB_WriteEndBlock -- Writes the end of a block to the settings file.@{b}

   SYNOPSIS@{ub}
        success = DB_WriteBeginEnd(settings)
          D0                         A0
        BOOL DB_WriteBeginEnd(struct DockSettings *);@{b}

   FUNCTION@{ub}
        Writes the word "end" to the settings file previously opened with
        @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}.@{b}

   INPUTS@{ub}
        settings - The DockSettings structure allocated by @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}.@{b}

   RESULT@{ub}
        TRUE if a block end was written or FALSE if it was not.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}("ENV:DockBot.prefs") ) {
          if( @{"DB_WriteBeginBlock" LINK "DB_WriteBeginBlock"}(s) ) {
            ...
            if( DB_WriteEndBlock(s) ) {
              ...
            }
          }
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsWrite()" LINK "DB_OpenSettingsWrite"}, @{"DB_WriteBeginBlock()" LINK "DB_WriteBeginBlock"}

@ENDNODE
@NODE "DB_WriteSetting" "dockbot.library/DB_WriteSetting()"
@{b}

   NAME@{ub}
        DB_WriteSetting -- Writes a key and value pair to the settings file.@{b}

   SYNOPSIS@{ub}
        success = DB_WriteSetting(settings,key,value)
          D0                        A0     A1  A2
        BOOL @{"DB_WriteBeginEnd" LINK "DB_WriteEndBlock"}(struct DockSettings *,STRPTR,STRPTR);@{b}

   FUNCTION@{ub}
        Writes a key and value to a settings file previously opened with
        @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}. An equals sign, =, will separate the two.@{b}

   INPUTS@{ub}
        settings - The DockSettings structure allocated by @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}.
        key      - A pointer to a NULL terminated string containing the key.
        value    - A pointer to a NULL terminated string containing the value.@{b}

   RESULT@{ub}
        TRUE if the setting was written or FALSE if it was not.@{b}

   EXAMPLE@{ub}
        struct DockSettings *s;
        if( s = @{"DB_OpenSettingsWrite" LINK "DB_OpenSettingsWrite"}("ENV:DockBot.prefs") ) {
          if( @{"DB_WriteBeginBlock" LINK "DB_WriteBeginBlock"}(s) ) {
            if( DB_WriteSetting(s, "key", "value") ) {
              ...
            }
          }
          @{"DB_CloseSettings" LINK "DB_CloseSettings"}(s);
        }@{b}

   SEE ALSO@{ub}
        @{"DB_OpenSettingsWrite()" LINK "DB_OpenSettingsWrite"}, @{"DB_WriteBeginBlock()" LINK "DB_WriteBeginBlock"}

@ENDNODE
